// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: todos.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTODO = `-- name: CreateTODO :one
insert into todos (user_id, title, description, completed, created_at)
values ($1, $2, $3, $4, CURRENT_TIMESTAMP)
returning id, user_id, title, description, completed, created_at, updated_at
`

type CreateTODOParams struct {
	UserID      int32
	Title       string
	Description pgtype.Text
	Completed   bool
}

func (q *Queries) CreateTODO(ctx context.Context, arg CreateTODOParams) (Todo, error) {
	row := q.db.QueryRow(ctx, createTODO,
		arg.UserID,
		arg.Title,
		arg.Description,
		arg.Completed,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.Completed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTODO = `-- name: DeleteTODO :exec
delete from todos where id = $1 and user_id = $2
`

type DeleteTODOParams struct {
	ID     string
	UserID int32
}

func (q *Queries) DeleteTODO(ctx context.Context, arg DeleteTODOParams) error {
	_, err := q.db.Exec(ctx, deleteTODO, arg.ID, arg.UserID)
	return err
}

const getTODO = `-- name: GetTODO :one
select id, user_id, title, description, completed, created_at, updated_at from todos where id = $1 and user_id = $2
`

type GetTODOParams struct {
	ID     string
	UserID int32
}

func (q *Queries) GetTODO(ctx context.Context, arg GetTODOParams) (Todo, error) {
	row := q.db.QueryRow(ctx, getTODO, arg.ID, arg.UserID)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.Completed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserTODOs = `-- name: GetUserTODOs :many
select id, user_id, title, description, completed, created_at, updated_at from todos where user_id = $1
`

func (q *Queries) GetUserTODOs(ctx context.Context, userID int32) ([]Todo, error) {
	rows, err := q.db.Query(ctx, getUserTODOs, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.Completed,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTODO = `-- name: UpdateTODO :one
update todos
set title = $3,
    description = $4,
    completed = $5,
    updated_at = CURRENT_TIMESTAMP
where id = $1
    and user_id = $2
returning id, user_id, title, description, completed, created_at, updated_at
`

type UpdateTODOParams struct {
	ID          string
	UserID      int32
	Title       string
	Description pgtype.Text
	Completed   bool
}

func (q *Queries) UpdateTODO(ctx context.Context, arg UpdateTODOParams) (Todo, error) {
	row := q.db.QueryRow(ctx, updateTODO,
		arg.ID,
		arg.UserID,
		arg.Title,
		arg.Description,
		arg.Completed,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.Completed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
